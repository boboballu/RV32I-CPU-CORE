# vsim -do "do wave.do;" "+test=1" valid_ready_tb 
# Start time: 15:23:06 on Dec 22,2022
# Loading sv_std.std
# Loading work.datatypes_globals_pkg
# Loading work.valid_ready_tb_sv_unit
# Loading work.valid_ready_tb
# Loading work.valid_ready_if
# Loading work.valid_credit
# Loading work.fifo_valid_ready_wrapper
# Loading work.fifo
# Loading work.valid_ready_tb_elements_sv_unit
# Loading work.valid_ready_tb_elements
# do wave.do
# 
run
#  rtl: valid_credit.sv : ---- parameters check ----
#  rtl: valid_credit.sv : VALID_FFS           2 | CREDIT_FFS           2
#  rtl: valid_credit.sv : FIFO_DEPTH           6 | CREDIT_CTR_MAX           6 | CREDIT_CTR_SIZE           3
# Received BUSY_RECEIVER
# ------ Busy Receiver test sequence ------
# sender : valid-> 1 ; data-> b8
# sender : valid-> 1 ; data-> 26
# sender : valid-> 1 ; data-> 66
# sender : valid-> 1 ; data-> b6
# sender : valid-> 1 ; data-> c6
# sender : valid-> 1 ; data-> 46
# sender : valid-> 1 ; data-> 72
# sender : valid-> 1 ; data-> 2e
# sender : valid-> 1 ; data-> 67
# sender : valid-> 1 ; data-> 3a
# sender : valid-> 1 ; data-> 6a
# sender : valid-> 1 ; data-> b4
# sender : valid-> 1 ; data-> 6f
# sender : valid-> 1 ; data-> 56
# sender : valid-> 1 ; data-> 35
# sender : valid-> 1 ; data-> d4
# sender : valid-> 1 ; data-> ae
# sender : valid-> 1 ; data-> 7d
# sender : valid-> 1 ; data-> db
# sender : valid-> 1 ; data-> 05
# sender : valid-> 1 ; data-> e3
# sender : valid-> 1 ; data-> 20
# sender : valid-> 1 ; data-> e5
# sender : valid-> 1 ; data-> 05
# sender : valid-> 1 ; data-> 25
# sender : valid-> 1 ; data-> e9
# sender : valid-> 1 ; data-> 5d
# sender : valid-> 1 ; data-> 8a
# sender : valid-> 1 ; data-> 58
# sender : valid-> 1 ; data-> 8b
# sender : valid-> 1 ; data-> 56
# sender : valid-> 1 ; data-> c9
# sender : valid-> 1 ; data-> b9
# sender : valid-> 1 ; data-> 40
# sender : valid-> 1 ; data-> 80
# sender : valid-> 1 ; data-> 0e
# sender : valid-> 1 ; data-> d4
# sender : valid-> 1 ; data-> 8e
# sender : valid-> 1 ; data-> c0
# sender : valid-> 1 ; data-> 97
# sender : valid-> 1 ; data-> 25
# sender : valid-> 1 ; data-> c7
# sender : valid-> 1 ; data-> 58
# sender : valid-> 1 ; data-> 51
# sender : valid-> 1 ; data-> 32
# sender : valid-> 1 ; data-> 23
# sender : valid-> 1 ; data-> 54
# sender : valid-> 1 ; data-> b3
# sender : valid-> 1 ; data-> 5a
# sender : valid-> 1 ; data-> e6
# receiver : ready -> 0
# receiver : ready -> 0
# receiver : ready -> 0
# receiver : ready -> 0
# receiver : ready -> 0
# receiver : ready -> 0
# receiver : ready -> 0
# receiver : ready -> 0
# receiver : ready -> 0
# receiver : ready -> 0
# receiver : ready -> 0
# receiver : ready -> 0
# receiver : ready -> 0
# receiver : ready -> 0
# receiver : ready -> 0
# receiver : ready -> 0
# receiver : ready -> 0
# receiver : ready -> 0
# receiver : ready -> 0
# receiver : ready -> 0
# receiver : ready -> 0
# receiver : ready -> 0
# receiver : ready -> 0
# receiver : ready -> 0
# receiver : ready -> 0
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# receiver : ready -> 1
# ------ Done ------
# time: 40: sender_A:           0 : sent < b8 >
# time: 50: sender_A:           1 : sent < 26 >
# time: 60: sender_A:           2 : sent < 66 >
# time: 70: sender_A:           3 : sent < b6 >
# time: 80: sender_A:           4 : sent < c6 >
# time: 90: sender_A:           5 : sent < 46 >
run
# rtl: time: 120: assert::FIFO_CTR_OVERFLOW check : Pass
run
run
# time: 330: receiver_B:           0 : received < b8 >
# time: 340: receiver_B:           1 : received < 26 >
# time: 350: receiver_B:           2 : received < 66 >
# time: 360: receiver_B:           3 : received < b6 >
# time: 360: sender_A:           6 : sent < 72 >
# time: 370: receiver_B:           4 : received < c6 >
# time: 370: sender_A:           7 : sent < 2e >
# time: 380: receiver_B:           5 : received < 46 >
# time: 380: sender_A:           8 : sent < 67 >
# time: 390: receiver_B:           6 : received < 72 >
# time: 390: sender_A:           9 : sent < 3a >
# time: 400: receiver_B:           7 : received < 2e >
# time: 400: sender_A:          10 : sent < 6a >
run
# time: 410: receiver_B:           8 : received < 67 >
# time: 410: sender_A:          11 : sent < b4 >
# time: 420: receiver_B:           9 : received < 3a >
# time: 420: sender_A:          12 : sent < 6f >
# time: 430: receiver_B:          10 : received < 6a >
# time: 430: sender_A:          13 : sent < 56 >
# time: 440: receiver_B:          11 : received < b4 >
# time: 440: sender_A:          14 : sent < 35 >
# time: 450: receiver_B:          12 : received < 6f >
# time: 450: sender_A:          15 : sent < d4 >
# time: 460: receiver_B:          13 : received < 56 >
# time: 460: sender_A:          16 : sent < ae >
# time: 470: receiver_B:          14 : received < 35 >
# time: 470: sender_A:          17 : sent < 7d >
# time: 480: receiver_B:          15 : received < d4 >
# time: 480: sender_A:          18 : sent < db >
# time: 490: receiver_B:          16 : received < ae >
# time: 490: sender_A:          19 : sent < 05 >
# time: 500: receiver_B:          17 : received < 7d >
# time: 500: sender_A:          20 : sent < e3 >
run
# time: 510: receiver_B:          18 : received < db >
# time: 510: sender_A:          21 : sent < 20 >
# time: 520: receiver_B:          19 : received < 05 >
# time: 520: sender_A:          22 : sent < e5 >
# time: 530: receiver_B:          20 : received < e3 >
# time: 530: sender_A:          23 : sent < 05 >
# time: 540: receiver_B:          21 : received < 20 >
# time: 540: sender_A:          24 : sent < 25 >
# time: 550: receiver_B:          22 : received < e5 >
# time: 550: sender_A:          25 : sent < e9 >
# time: 560: receiver_B:          23 : received < 05 >
# time: 560: sender_A:          26 : sent < 5d >
# time: 570: receiver_B:          24 : received < 25 >
# time: 570: sender_A:          27 : sent < 8a >
# time: 580: receiver_B:          25 : received < e9 >
# time: 580: sender_A:          28 : sent < 58 >
# time: 590: receiver_B:          26 : received < 5d >
# time: 590: sender_A:          29 : sent < 8b >
# time: 600: receiver_B:          27 : received < 8a >
# time: 600: sender_A:          30 : sent < 56 >
# ** Fatal: Unable to read lock file necessary for use of uncounted nodelocked license. Exiting.
# End time: 15:28:06 on Dec 22,2022, Elapsed time: 0:05:00
# Errors: 0, Warnings: 0
